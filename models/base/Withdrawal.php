<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;
use yii\helpers\ArrayHelper;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "withdrawal".
 *
 * @property integer $id
 * @property integer $customer_id
 * @property string $date
 * @property string $amount
 * @property integer $status
 * @property string $comment
 * @property integer $action_by
 * @property string $action_date_time
 * @property string $created_at
 * @property string $updated_at
 *
 * @property \app\models\Customer $customer
 * @property \dektrium\user\models\User $actionBy
 */
abstract class Withdrawal extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%withdrawal}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['timestamp'] = [
            'class' => TimestampBehavior::class,
        ];
        
        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        $parentRules = parent::rules();
        return ArrayHelper::merge($parentRules, [
            [['customer_id', 'date', 'amount', 'action_by'], 'required'],
            [['customer_id', 'status', 'action_by'], 'integer'],
            [['date', 'action_date_time'], 'safe'],
            [['amount'], 'number', 'min' => 0.01],
            [['comment'], 'string'],
            [['status'], 'in', 'range' => [0, 1, 2, 3, 4]],
            [['customer_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Customer::class, 'targetAttribute' => ['customer_id' => 'id']],
            [['action_by'], 'exist', 'skipOnError' => true, 'targetClass' => \dektrium\user\models\User::class, 'targetAttribute' => ['action_by' => 'id']],
        ]);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'id' => 'ID',
            'customer_id' => 'Customer',
            'date' => 'Date',
            'amount' => 'Amount',
            'status' => 'Status',
            'comment' => 'Comment',
            'action_by' => 'Action By',
            'action_date_time' => 'Action Date Time',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ]);
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return ArrayHelper::merge(parent::attributeHints(), [
            'id' => 'Unique identifier for the withdrawal request',
            'customer_id' => 'Reference to the customer who made the withdrawal request',
            'date' => 'Date of the withdrawal request',
            'amount' => 'Amount requested for withdrawal',
            'status' => 'Status of the withdrawal: 0=Pending, 1=Approved, 2=Rejected, 3=Processing, 4=Completed',
            'comment' => 'Comments or notes about the withdrawal request',
            'action_by' => 'User who performed the action',
            'action_date_time' => 'Date and time when the action was performed',
            'created_at' => 'Timestamp when the record was created',
            'updated_at' => 'Timestamp when the record was last updated',
        ]);
    }

    /**
     * Get customer relation
     * @return \yii\db\ActiveQuery
     */
    public function getCustomer()
    {
        return $this->hasOne(\app\models\Customer::class, ['id' => 'customer_id']);
    }

    /**
     * Get action by user relation
     * @return \yii\db\ActiveQuery
     */
    public function getActionBy()
    {
        return $this->hasOne(\dektrium\user\models\User::class, ['id' => 'action_by']);
    }

    /**
     * Get status options
     * @return array
     */
    public static function getStatusOptions()
    {
        return [
            0 => 'Pending',
            1 => 'Approved',
            2 => 'Rejected',
            3 => 'Processing',
            4 => 'Completed',
        ];
    }

    /**
     * Get status label
     * @return string
     */
    public function getStatusLabel()
    {
        $options = self::getStatusOptions();
        return isset($options[$this->status]) ? $options[$this->status] : 'Unknown';
    }

    /**
     * Get formatted date
     * @return string
     */
    public function getFormattedDate()
    {
        return date('M d, Y', strtotime($this->date));
    }

    /**
     * Get formatted action date time
     * @return string
     */
    public function getFormattedActionDateTime()
    {
        return date('M d, Y H:i:s', strtotime($this->action_date_time));
    }

    /**
     * Get formatted created at
     * @return string
     */
    public function getFormattedCreatedAt()
    {
        return date('M d, Y H:i:s', strtotime($this->created_at));
    }

    /**
     * Get formatted updated at
     * @return string
     */
    public function getFormattedUpdatedAt()
    {
        return date('M d, Y H:i:s', strtotime($this->updated_at));
    }

    /**
     * Check if withdrawal is pending
     * @return bool
     */
    public function isPending()
    {
        return $this->status === 0;
    }

    /**
     * Check if withdrawal is approved
     * @return bool
     */
    public function isApproved()
    {
        return $this->status === 1;
    }

    /**
     * Check if withdrawal is rejected
     * @return bool
     */
    public function isRejected()
    {
        return $this->status === 2;
    }

    /**
     * Check if withdrawal is processing
     * @return bool
     */
    public function isProcessing()
    {
        return $this->status === 3;
    }

    /**
     * Check if withdrawal is completed
     * @return bool
     */
    public function isCompleted()
    {
        return $this->status === 4;
    }

    /**
     * Get status with icon
     * @return string
     */
    public function getStatusWithIcon()
    {
        $icons = [
            0 => '<i class="fas fa-clock text-warning"></i> Pending',
            1 => '<i class="fas fa-check-circle text-success"></i> Approved',
            2 => '<i class="fas fa-times-circle text-danger"></i> Rejected',
            3 => '<i class="fas fa-spinner text-info"></i> Processing',
            4 => '<i class="fas fa-check-double text-primary"></i> Completed',
        ];
        
        return $icons[$this->status] ?? '<i class="fas fa-question-circle text-secondary"></i> Unknown';
    }

    /**
     * Get formatted amount
     * @return string
     */
    public function getFormattedAmount()
    {
        return '$' . number_format($this->amount, 2);
    }

    /**
     * Get withdrawal summary
     * @return string
     */
    public function getWithdrawalSummary()
    {
        return "Withdrawal #{$this->id} - {$this->getFormattedAmount()} - {$this->getStatusLabel()}";
    }

    /**
     * Get detailed withdrawal info
     * @return array
     */
    public function getWithdrawalDetails()
    {
        return [
            'id' => $this->id,
            'customer_id' => $this->customer_id,
            'customer_name' => $this->customer ? $this->customer->name : 'Unknown',
            'date' => $this->getFormattedDate(),
            'amount' => $this->amount,
            'formatted_amount' => $this->getFormattedAmount(),
            'status' => $this->getStatusLabel(),
            'status_id' => $this->status,
            'comment' => $this->comment,
            'action_by' => $this->action_by,
            'action_by_name' => $this->actionBy ? $this->actionBy->username : 'Unknown',
            'action_date_time' => $this->getFormattedActionDateTime(),
            'created_at' => $this->getFormattedCreatedAt(),
            'updated_at' => $this->getFormattedUpdatedAt(),
            'is_pending' => $this->isPending(),
            'is_approved' => $this->isApproved(),
            'is_rejected' => $this->isRejected(),
            'is_processing' => $this->isProcessing(),
            'is_completed' => $this->isCompleted(),
            'withdrawal_summary' => $this->getWithdrawalSummary(),
        ];
    }
}
