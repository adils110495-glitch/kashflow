<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;
use yii\helpers\ArrayHelper;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "ledger".
 *
 * @property integer $id
 * @property integer $customer_id
 * @property string $date
 * @property float $debit
 * @property float $credit
 * @property integer $type
 * @property integer $status
 * @property integer $action_by
 * @property string $action_date_time
 * @property string $created_at
 * @property string $updated_at
 *
 * @property \app\models\Customer $customer
 * @property \dektrium\user\models\User $actionBy
 */
abstract class Ledger extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%ledger}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['timestamp'] = [
            'class' => TimestampBehavior::class,
        ];
        
        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        $parentRules = parent::rules();
        return ArrayHelper::merge($parentRules, [
            [['customer_id', 'date', 'action_by'], 'required'],
            [['customer_id', 'type', 'status', 'action_by'], 'integer'],
            [['date', 'action_date_time'], 'safe'],
            [['debit', 'credit'], 'number', 'min' => 0],
            [['type'], 'in', 'range' => [1, 2, 3, 4, 5]],
            [['status'], 'in', 'range' => [0, 1]],
            [['customer_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Customer::class, 'targetAttribute' => ['customer_id' => 'id']],
            [['action_by'], 'exist', 'skipOnError' => true, 'targetClass' => \dektrium\user\models\User::class, 'targetAttribute' => ['action_by' => 'id']],
        ]);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'id' => 'ID',
            'customer_id' => 'Customer',
            'date' => 'Date',
            'debit' => 'Debit Amount',
            'credit' => 'Credit Amount',
            'type' => 'Transaction Type',
            'status' => 'Status',
            'action_by' => 'Action By',
            'action_date_time' => 'Action Date Time',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ]);
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return ArrayHelper::merge(parent::attributeHints(), [
            'id' => 'Unique identifier for the ledger entry',
            'customer_id' => 'Reference to the customer who owns this ledger entry',
            'date' => 'Date of the transaction',
            'debit' => 'Amount debited from the customer account',
            'credit' => 'Amount credited to the customer account',
            'type' => 'Type of transaction: 1=Manual, 2=Package Purchase, 3=Income, 4=Withdrawal, 5=Refund',
            'status' => 'Status of the ledger entry: 0=Inactive, 1=Active',
            'action_by' => 'User who performed the action',
            'action_date_time' => 'Date and time when the action was performed',
            'created_at' => 'Timestamp when the record was created',
            'updated_at' => 'Timestamp when the record was last updated',
        ]);
    }

    /**
     * Get customer relation
     * @return \yii\db\ActiveQuery
     */
    public function getCustomer()
    {
        return $this->hasOne(\app\models\Customer::class, ['id' => 'customer_id']);
    }

    /**
     * Get action by user relation
     * @return \yii\db\ActiveQuery
     */
    public function getActionBy()
    {
        return $this->hasOne(\dektrium\user\models\User::class, ['id' => 'action_by']);
    }

    /**
     * Get type options
     * @return array
     */
    public static function getTypeOptions()
    {
        return [
            1 => 'Topup',
            2 => 'Withdrawal',
            3 => 'Topup Refund',
            4 => 'Withdrawal Refund',
        ];
    }

    /**
     * Get status options
     * @return array
     */
    public static function getStatusOptions()
    {
        return [
            0 => 'Inactive',
            1 => 'Active',
        ];
    }

    /**
     * Get type label
     * @return string
     */
    public function getTypeLabel()
    {
        $options = self::getTypeOptions();
        return isset($options[$this->type]) ? $options[$this->type] : 'Unknown';
    }

    /**
     * Get status label
     * @return string
     */
    public function getStatusLabel()
    {
        $options = self::getStatusOptions();
        return isset($options[$this->status]) ? $options[$this->status] : 'Unknown';
    }

    /**
     * Get formatted debit amount
     * @return string
     */
    public function getFormattedDebit()
    {
        return $this->debit > 0 ? '$' . number_format($this->debit, 2) : '-';
    }

    /**
     * Get formatted credit amount
     * @return string
     */
    public function getFormattedCredit()
    {
        return $this->credit > 0 ? '$' . number_format($this->credit, 2) : '-';
    }

    /**
     * Get balance (credit - debit)
     * @return float
     */
    public function getBalance()
    {
        return $this->credit - $this->debit;
    }

    /**
     * Get formatted balance
     * @return string
     */
    public function getFormattedBalance()
    {
        $balance = $this->getBalance();
        $sign = $balance >= 0 ? '+' : '';
        return $sign . '$' . number_format($balance, 2);
    }

    /**
     * Check if this is a debit transaction
     * @return bool
     */
    public function isDebit()
    {
        return $this->debit > 0;
    }

    /**
     * Check if this is a credit transaction
     * @return bool
     */
    public function isCredit()
    {
        return $this->credit > 0;
    }

    /**
     * Get transaction type text
     * @return string
     */
    public function getTransactionType()
    {
        if ($this->isDebit()) {
            return 'Debit';
        } elseif ($this->isCredit()) {
            return 'Credit';
        }
        return 'Neutral';
    }

    /**
     * Check if the ledger entry is active
     * @return bool
     */
    public function isActive()
    {
        return $this->status === 1;
    }

    /**
     * Check if the ledger entry is inactive
     * @return bool
     */
    public function isInactive()
    {
        return $this->status === 0;
    }

    /**
     * Check if this is a topup transaction
     * @return bool
     */
    public function isTopup()
    {
        return $this->type === 1;
    }

    /**
     * Check if this is a withdrawal transaction
     * @return bool
     */
    public function isWithdrawal()
    {
        return $this->type === 2;
    }

    /**
     * Check if this is a topup refund transaction
     * @return bool
     */
    public function isTopupRefund()
    {
        return $this->type === 3;
    }

    /**
     * Check if this is a withdrawal refund transaction
     * @return bool
     */
    public function isWithdrawalRefund()
    {
        return $this->type === 4;
    }

    /**
     * Get transaction type with icon
     * @return string
     */
    public function getTransactionTypeWithIcon()
    {
        $icons = [
            1 => '<i class="fas fa-plus-circle"></i> Topup',
            2 => '<i class="fas fa-minus-circle"></i> Withdrawal',
            3 => '<i class="fas fa-undo"></i> Topup Refund',
            4 => '<i class="fas fa-redo"></i> Withdrawal Refund',
        ];
        
        return $icons[$this->type] ?? '<i class="fas fa-question"></i> Unknown';
    }

    /**
     * Get status with icon
     * @return string
     */
    public function getStatusWithIcon()
    {
        $icons = [
            0 => '<i class="fas fa-times-circle text-danger"></i> Inactive',
            1 => '<i class="fas fa-check-circle text-success"></i> Active',
        ];
        
        return $icons[$this->status] ?? '<i class="fas fa-question-circle text-warning"></i> Unknown';
    }

    /**
     * Get formatted action date time
     * @return string
     */
    public function getFormattedActionDateTime()
    {
        return date('M d, Y H:i:s', strtotime($this->action_date_time));
    }

    /**
     * Get formatted date
     * @return string
     */
    public function getFormattedDate()
    {
        return date('M d, Y', strtotime($this->date));
    }

    /**
     * Get formatted created at
     * @return string
     */
    public function getFormattedCreatedAt()
    {
        return date('M d, Y H:i:s', strtotime($this->created_at));
    }

    /**
     * Get formatted updated at
     * @return string
     */
    public function getFormattedUpdatedAt()
    {
        return date('M d, Y H:i:s', strtotime($this->updated_at));
    }

    /**
     * Get transaction summary
     * @return string
     */
    public function getTransactionSummary()
    {
        $type = $this->getTypeLabel();
        $amount = $this->isDebit() ? $this->getFormattedDebit() : $this->getFormattedCredit();
        $direction = $this->isDebit() ? 'Debit' : 'Credit';
        
        return "{$type} - {$direction}: {$amount}";
    }

    /**
     * Get detailed transaction info
     * @return array
     */
    public function getTransactionDetails()
    {
        return [
            'id' => $this->id,
            'customer_id' => $this->customer_id,
            'customer_name' => $this->customer ? $this->customer->name : 'Unknown',
            'date' => $this->getFormattedDate(),
            'type' => $this->getTypeLabel(),
            'type_id' => $this->type,
            'debit' => $this->debit,
            'credit' => $this->credit,
            'balance' => $this->getBalance(),
            'formatted_debit' => $this->getFormattedDebit(),
            'formatted_credit' => $this->getFormattedCredit(),
            'formatted_balance' => $this->getFormattedBalance(),
            'status' => $this->getStatusLabel(),
            'status_id' => $this->status,
            'action_by' => $this->action_by,
            'action_by_name' => $this->actionBy ? $this->actionBy->username : 'Unknown',
            'action_date_time' => $this->getFormattedActionDateTime(),
            'created_at' => $this->getFormattedCreatedAt(),
            'updated_at' => $this->getFormattedUpdatedAt(),
            'is_debit' => $this->isDebit(),
            'is_credit' => $this->isCredit(),
            'is_active' => $this->isActive(),
            'transaction_summary' => $this->getTransactionSummary(),
        ];
    }
}
